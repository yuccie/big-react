(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-dev-runtime"] = global["jsx-dev-runtime"] || {}, global["jsx-dev-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	// 如果支持，则生成一个独一无二的类型（也是为了防止滥用react element），否则用一个数字代替
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react element')
	    : 0xaecf17;

	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE, // 表示元素的类型，用于区分当前数据是否为reactElement，内部使用字段
	        type, // 元素的
	        key, // 元素的
	        ref, // 元素的
	        props, // 元素的
	        __mark: 'djch' // 区别于真实react的一个字符串
	    };
	    return element;
	};
	// <div>
	//   	<div>hello</div>
	//     <div>world</div>
	// </div>
	// 参考babel编译后的代码
	// import { jsx as _jsx } from 'react/jsx-runtime';
	// import { jsxs as _jsxs } from 'react/jsx-runtime';

	// 	children: [

	// 			children: 'hello'
	// 		}),

	// 			children: 'world'
	// 		})
	// 	]
	// });
	// maybeChildren 是哪些值？？？❌
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (const prop in config) {
	        const val = config[prop];
	        // 特殊处理 key，ref ？？？❌
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    const maybeChildrenLength = maybeChildren.length;
	    if (maybeChildrenLength) {
	        if (maybeChildrenLength === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    // 将处理过后的数据，传入到 ReactElement函数里，生成对应的节点
	    return ReactElement(type, key, ref, props);
	};
	// 其实还可以封装 jsxDEV，从而在开发环境做更多的事情。
	const jsxDEV = jsx;

	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
